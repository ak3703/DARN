/* 1D Matrix Scalar Addition:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Adds to the matrix in memory */

void add_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Addition:
	Takes in one matrix pointer, a scalar, and the height and width of the matrix
	Adds to the matrix in memory */

void add_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Subtraction:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Subtracts the values from the matrix in memory */

void sub_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Subtraction:
	Takes in one matrix pointer, a scalar, and the height and width of the matrix
	Subtracts the values from the matrix in memory */

void sub_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Multiplication:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Multiplies the values from the matrix with the scalar in memory */

void mult_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x * scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Multiplication:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Multiplies the values from the matrix with the scalar in memory */

void mult_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x * scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Division:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Divides the values from the matrix with the scalar in memory */

void div_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x / scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Division:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Divides the values from the matrix with the scalar in memory */

void div_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x / scalar;
		x = ++x;
	}
}

/* 1D Int Matrix addition:
	Takes in two matrix pointers and the length of the matrices
	Adds the second matrix into the first in memory */

void add_1D_int(int[] x, int[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Int Matrix addition:
	Takes in two matrix pointers and the height and width of the matrices
	Adds the second matrix into the first in memory */

void add_2D_int(int[][] x, int[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Float Matrix addition:
	Takes in two matrix pointers and the length of the matrices
	Adds the second matrix into the first in memory */

void add_1D_float(float[] x, float[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Float Matrix addition:
	Takes in two matrix pointers and the height and width of the matrices
	Adds the second matrix into the first in memory */

void add_2D_float(float[][] x, float[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Int Matrix subtraction:
	Takes in two matrix pointers and the length of the matrices
	Subtracts the second matrix from the first in memory */

void sub_1D_int(int[] x, int[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Int Matrix subtraction:
	Takes in two matrix pointers and the height and width of the matrices
	Subtracts the second matrix from the first in memory */

void sub_2D_int(int[][] x, int[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Float Matrix subtraction:
	Takes in two matrix pointers and the length of the matrices
	Subtracts the second matrix from the first in memory */

void sub_1D_float(float[] x, float[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Float Matrix subtraction:
	Takes in two matrix pointers and the height and width of the matrices
	Subtracts the second matrix from the first in memory */

void sub_2D_float(float[][] x, float[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/*
	2D Int Matrix Multiplication
	Takes in two matrices for multiplication and an output matrix.
	Takes in the height and width of the two input matrices
	The Output matrix must be of size height = height of 1st matrix
	and width = width of 2nd matrix.
	Store the variables in the output matrix. Returns nothing.

*/
void mult_2D_int(int[][] x, int[][] y, int[][] output, int h1, int w1, int h2, int w2) {

	int i;
	int j;
	int k; 
	int l;
	int[][] temp_x;
	int[][] temp_y;
	int[][] temp_output;
	temp_output = output;

	/* Zero out output matrix*/
	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			#temp_output = 0;
			temp_output = ++temp_output;
		}
	}

	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			temp_x = x;
			temp_y = y;

			for (k=0;k<(i*w1);k=k+1){
				temp_x = ++temp_x;
		
			}
			for (l=0;l<j;l=l+1) {
				temp_y = ++temp_y;
			}

			for (k=0;k<w1;k=k+1) {
				#output = #output + (#temp_x * #temp_y);
				temp_x = ++temp_x;	
				for (l=0;l<w2;l=l+1) {
					temp_y = ++temp_y;
				}
			}
			output = ++output;
		}
	}

}

/*
	2D Float Matrix Multiplication
	Takes in two matrices for multiplication and an output matrix.
	Takes in the height and width of the two input matrices
	The Output matrix must be of size height = height of 1st matrix
	and width = width of 2nd matrix.
	Store the variables in the output matrix. Returns nothing.

*/
void mult_2D_float(float[][] x, float[][] y, float[][] output, int h1, int w1, int h2, int w2) {

	int i;
	int j;
	int k; 
	int l;
	float[][] temp_x;
	float[][] temp_y;
	float[][] temp_output;
	temp_output = output;

	/* Zero out output matrix*/
	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			#temp_output = 0.0;
			temp_output = ++temp_output;
		}
	}

	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			temp_x = x;
			temp_y = y;

			for (k=0;k<(i*w1);k=k+1){
				temp_x = ++temp_x;
		
			}
			for (l=0;l<j;l=l+1) {
				temp_y = ++temp_y;
			}

			for (k=0;k<w1;k=k+1) {
				#output = #output + (#temp_x * #temp_y);
				temp_x = ++temp_x;	
				for (l=0;l<w2;l=l+1) {
					temp_y = ++temp_y;
				}
			}
			output = ++output;
		}
	}

}

/*
	2D Int Matrix Transpose
	Takes in one input matrix and an output matrix.
	Takes in the height and width of the input matrix
	The Output matrix must be of size height = width of input matrix
	and width = height of input matrix.
	Computes the transpose of the input matrix.
	Store the variables in the output matrix. Returns nothing.

*/

void transpose_2D_int(int[][] x, int[][] output, int h, int w) {

	int i;
	int j;
	int k; 
	int[][] temp_x;
	int[][] temp_output;
	temp_x = x;
	temp_output = output;

	/* Zero out output matrix*/
	for (i=0;i<w;i=i+1) {
		for (j=0;j<h;j=j+1) {
			#temp_output = 0;
			temp_output = ++temp_output;
		}
	}
	
	/* Copy into output matrix */
	for (i=0;i<w;i=i+1) {
		for (j=0;j<h;j=j+1) {
			temp_x = x;
			for (k=0;k<i;k=k+1) {
				temp_x = ++temp_x;
			}

			for (k=0;k<(j*w);k=k+1) {
				temp_x = ++temp_x;
			}
			
			#output = #temp_x;

			output = ++output;

		}
	}
}


/*
	2D Float Matrix Transpose
	Takes in one input matrix and an output matrix.
	Takes in the height and width of the input matrix
	The Output matrix must be of size height = width of input matrix
	and width = height of input matrix.
	Computes the transpose of the input matrix.
	Store the variables in the output matrix. Returns nothing.

*/

void transpose_2D_float(float[][] x, float[][] output, int h, int w) {

	int i;
	int j;
	int k; 
	float[][] temp_x;
	float[][] temp_output;
	temp_x = x;
	temp_output = output;

	/* Zero out output matrix*/
	for (i=0;i<w;i=i+1) {
		for (j=0;j<h;j=j+1) {
			#temp_output = 0.0;
			temp_output = ++temp_output;
		}
	}
	
	/* Copy into output matrix */
	for (i=0;i<w;i=i+1) {
		for (j=0;j<h;j=j+1) {
			temp_x = x;
			for (k=0;k<i;k=k+1) {
				temp_x = ++temp_x;
			}

			for (k=0;k<(j*w);k=k+1) {
				temp_x = ++temp_x;
			}
			
			#output = #temp_x;

			output = ++output;

		}
	}
}

void zero_1D_int(int[] x, int l) {
	populate_1D_int(x,0,l);
}

void zero_2D_int(int[][] x, int h, int w) {
	populate_2D_int(x,0,h,w);
}

void populate_1D_int(int[] x, int a, int l) {
	int i;
	for (i=0;i<l;i=i+1) {
		#x = a;
		x = ++x;
	}
}

void populate_2D_int(int[][] x, int a, int h, int w) {
	int i;
	for (i=0;i<(h*w);i=i+1) {
		#x = a;
		x = ++x;
	}
}

void print_1D_int(int[] x, int l) {
	int i;
	prints("[\t");
	for (i=0; i<l; i=i+1) {
		print(#x);
		prints("\t");
		x = ++x;
	}
	prints("]\n");
}

void print_1D_float(float[] x, int l) {
	int i;
	prints("[\t");
	for (i=0; i<l; i=i+1) {
		printf(#x);
		prints("\t");
		x = ++x;
	}
	prints("]\n");
}

void print_2D_int(int[][] x, int h, int w) {
	int i;
	int j;
	prints("[\n");
	for (i=0; i<h; i=i+1) {
		prints("|\t");
		for (j=0; j<w; j=j+1) {
			print(#x);	
			prints("\t");
			x = ++x;
		}
		prints("|\n");
	}
	prints("]\n");
}

void print_2D_float(float[][] x, int h, int w) {
	int i;
	int j;
	prints("[\n");
	for (i=0; i<h; i=i+1) {
		prints("|\t");
		for (j=0; j<w; j=j+1) {
			printf(#x);	
			prints("\t");
			x = ++x;
		}
		prints("|\n");
	}
	prints("]\n");
}

/* Determinant of 2x2 and 3x3 for Ints:
	Finds the determinant of a matrix of ints */

int det_int(int[][] x, int he, int w) {
	int a;
	int b;
	int c;
	int d;
	int e;
	int f;
	int g;
	int h;
	int i;
	int det;
	if ((he==2 && w==2) || (he==3 && w==3))  {
		a = #x;
		x = ++x;
		b = #x;
		x = ++x;
		c = #x;
		x = ++x;
		d = #x;
		x = ++x;
		if (w==2){
			det = (a*d)-(b*c);
		} else {
			e = #x;
			x = ++x;
			f = #x;
			x = ++x;
			g = #x;
			x = ++x;
			h = #x;
			x = ++x;
			i = #x;
			det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
		}
	} else {
		return 0;
	}
	return det;
}

/* Determinant of 2x2 and 3x3 for Floats:
	Finds the determinant of a matrix of floats */

float det_float(float[][] x, int he, int w) {
	float a;
	float b;
	float c;
	float d;
	float e;
	float f;
	float g;
	float h;
	float i;
	float det;
	if ((he==2 && w==2) || (he==3 && w==3))  {
		a = #x;
		x = ++x;
		b = #x;
		x = ++x;
		c = #x;
		x = ++x;
		d = #x;
		x = ++x;
		if (w==2){
			det = (a*d)-(b*c);
		} else {
			e = #x;
			x = ++x;
			f = #x;
			x = ++x;
			g = #x;
			x = ++x;
			h = #x;
			x = ++x;
			i = #x;
			det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
		}
	} else {
		return 0.0;
	}
	return det;
}

float inverse_float(float[][] x, int h, int w){
	float ret;
	if ((h==3 && w==3) || (h==2 && w==2)){
		ret = det_float(x, h, w);
		if (ret != 0.0){
			return 1.0/ret;
		}
		return 0.0;
	} else {
		return 0.0;
	}
}

