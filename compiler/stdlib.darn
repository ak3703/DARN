/* 1D Matrix Scalar Addition:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Adds to the matrix in memory */

void add_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Addition:
	Takes in one matrix pointer, a scalar, and the height and width of the matrix
	Adds to the matrix in memory */

void add_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Subtraction:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Subtracts the values from the matrix in memory */

void sub_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Subtraction:
	Takes in one matrix pointer, a scalar, and the height and width of the matrix
	Subtracts the values from the matrix in memory */

void sub_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Multiplication:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Multiplies the values from the matrix with the scalar in memory */

void mult_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x * scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Multiplication:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Multiplies the values from the matrix with the scalar in memory */

void mult_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x * scalar;
		x = ++x;
	}
}

/* 1D Matrix Scalar Division:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Divides the values from the matrix with the scalar in memory */

void div_1D_scalar(int[] x, int scalar, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x / scalar;
		x = ++x;
	}
}

/* 2D Matrix Scalar Division:
	Takes in one matrix pointer, a scalar, and the length of the matrix
	Divides the values from the matrix with the scalar in memory */

void div_2D_scalar(int[][] x, int scalar, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x / scalar;
		x = ++x;
	}
}

/* 1D Int Matrix addition:
	Takes in two matrix pointers and the length of the matrices
	Adds the second matrix into the first in memory */

void add_1D_int(int[] x, int[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Int Matrix addition:
	Takes in two matrix pointers and the height and width of the matrices
	Adds the second matrix into the first in memory */

void add_2D_int(int[][] x, int[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Float Matrix addition:
	Takes in two matrix pointers and the length of the matrices
	Adds the second matrix into the first in memory */

void add_1D_float(float[] x, float[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Float Matrix addition:
	Takes in two matrix pointers and the height and width of the matrices
	Adds the second matrix into the first in memory */

void add_2D_float(float[][] x, float[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x + #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Int Matrix subtraction:
	Takes in two matrix pointers and the length of the matrices
	Subtracts the second matrix from the first in memory */

void sub_1D_int(int[] x, int[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Int Matrix subtraction:
	Takes in two matrix pointers and the height and width of the matrices
	Subtracts the second matrix from the first in memory */

void sub_2D_int(int[][] x, int[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 1D Float Matrix subtraction:
	Takes in two matrix pointers and the length of the matrices
	Subtracts the second matrix from the first in memory */

void sub_1D_float(float[] x, float[] y, int l) {
	
	int i;

	for (i=0; i<l; i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/* 2D Float Matrix subtraction:
	Takes in two matrix pointers and the height and width of the matrices
	Subtracts the second matrix from the first in memory */

void sub_2D_float(float[][] x, float[][] y, int h, int w) {
	
	int i;

	for (i=0; i<(h*w); i=i+1) {
		#x = #x - #y;
		x = ++x;
		y = ++y;
	}
}

/*
	2D Int Matrix Multiplication


*/
void mult_2D_int(int[][] x, int[][] y, int[][] output, int h1, int w1, int h2, int w2) {

	int i;
	int j;
	int k; 
	int l;
	int[][] temp_x;
	int[][] temp_y;
	int[][] temp_output;
	temp_output = output;

	/* Zero out output matrix*/
	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			#temp_output = 0;
			temp_output = ++temp_output;
		}
	}

	for (i=0;i<h1;i=i+1) {
		for (j=0;j<w2;j=j+1) {
			temp_x = x;
			temp_y = y;

			for (k=0;k<(i*w1);k=k+1){
				temp_x = ++temp_x;
		
			}
			for (l=0;l<j;l=l+1) {
				temp_y = ++temp_y;
			}

			for (k=0;k<w1;k=k+1) {
				#output = #output + (#temp_x * #temp_y);
				temp_x = ++temp_x;	
				for (l=0;l<w2;l=l+1) {
					temp_y = ++temp_y;
				}
			}
			output = ++output;
		}
	}

}

void print_1D_int(int[] x, int l) {
	int i;
	for (i=0; i<l; i=i+1) {
		print(#x);
		x = ++x;
	}
}

void print_1D_float(float[] x, int l) {
	int i;
	for (i=0; i<l; i=i+1) {
		printf(#x);
		x = ++x;
	}
}

void print_2D_int(int[][] x, int h, int w) {
	int i;
	for (i=0; i<(h*w); i=i+1) {
		print(#x);
		x = ++x;
	}
}

void print_2D_float(float[][] x, int h, int w) {
	int i;
	for (i=0; i<(h*w); i=i+1) {
		printf(#x);
		x = ++x;
	}
}



/*
Scalar ops:
+ add 1D matrix int 
+ add 2D matrix int 
+ sub 1D matrix int 
+ sub 2D matrix int 
+ mult 1D matrix int 
+ mult 2D matrix int 
+ div 1D matrix int 
+ div 2D matrix int 

Matrix ops:
Basic:
+ add 1D matrix matrix int
+ add 2D matrix matrix int
+ add 1D matrix matrix float
+ add 2D matrix matrix float
+ sub 1D matrix matrix int
+ sub 2D matrix matrix int
+ sub 1D matrix matrix float
+ sub 2D matrix matrix float

Mult:
2D int matrix mult
2D float matrix mult

print 1D matrix int
print 2D matrix int 

determinant 2D matrix 
*/
