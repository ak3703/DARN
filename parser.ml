type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | LBRACK
  | RBRACK
  | COMMA
  | COLON
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EOF
  | ASSIGN
  | NOT
  | BOOL
  | INT
  | FLOAT
  | CHAR
  | TRUE
  | FALSE
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | INTLITERAL of (int)
  | FLOATLITERAL of (float)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 41 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LCURLY *);
  261 (* RCURLY *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* COLON *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
    0 (* EOF *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* BOOL *);
  273 (* INT *);
  274 (* FLOAT *);
  275 (* CHAR *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* AND *);
  285 (* OR *);
    0|]

let yytransl_block = [|
  286 (* INTLITERAL *);
  287 (* FLOATLITERAL *);
  288 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\001\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\015\000\016\000\000\000\019\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\007\000\008\000"

let yysindex = "\255\255\
\248\254\000\000\248\254\000\000\000\000\244\254\000\000\001\000\
\000\000\248\254\248\254\248\254\248\254\248\254\000\000\248\254\
\248\254\248\254\248\254\248\254\248\254\248\254\248\254\076\255\
\254\254\254\254\000\000\000\000\249\254\249\254\015\255\015\255\
\015\255\015\255\103\255\084\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\029\000\037\000\000\000\000\000\021\000\077\000\045\000\053\000\
\061\000\069\000\013\000\016\000"

let yygindex = "\000\000\
\000\000\062\000"

let yytablesize = 362
let yytable = "\001\000\
\015\000\010\000\011\000\012\000\013\000\014\000\003\000\018\000\
\017\000\013\000\014\000\000\000\013\000\000\000\000\000\012\000\
\018\000\019\000\020\000\021\000\011\000\004\000\005\000\006\000\
\011\000\012\000\013\000\014\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\009\000\000\000\000\000\024\000\
\025\000\026\000\027\000\028\000\010\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\011\000\012\000\013\000\
\014\000\000\000\000\000\000\000\000\000\011\000\012\000\013\000\
\014\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\011\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\002\000\002\000\
\013\000\013\000\011\000\011\000\012\000\000\000\003\000\003\000\
\011\000\011\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\010\000\000\000\000\000\000\000\000\000\
\010\000\010\000"

let yycheck = "\001\000\
\000\000\014\001\010\001\011\001\012\001\013\001\015\001\000\000\
\000\000\012\001\013\001\255\255\000\000\255\255\255\255\000\000\
\024\001\025\001\026\001\027\001\000\000\030\001\031\001\032\001\
\010\001\011\001\012\001\013\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\003\000\255\255\255\255\255\255\000\000\255\255\255\255\010\000\
\011\000\012\000\013\000\014\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\010\001\011\001\
\028\001\029\001\022\001\023\001\029\001\255\255\010\001\011\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\022\001\023\001\255\255\255\255\255\255\255\255\
\028\001\029\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LCURLY\000\
  RCURLY\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EOF\000\
  ASSIGN\000\
  NOT\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  CHAR\000\
  TRUE\000\
  FALSE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  FLOATLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 25 "parser.mly"
                  ( _1 )
# 261 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 27 "parser.mly"
                        (Binop(_1, Add, _3) )
# 269 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                        (Binop(_1, Sub, _3) )
# 277 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                        (Binop(_1, Mul, _3) )
# 285 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                        (Binop(_1, Div, _3) )
# 293 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                        (Binop(_1, Less, _3) )
# 301 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                        (Binop(_1, Greater, _3) )
# 309 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                        (Binop(_1, Leq, _3) )
# 317 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                        (Binop(_1, Geq, _3) )
# 325 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                        (Binop(_1, Neq, _3) )
# 333 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                        (Binop(_1, Eq, _3) )
# 341 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                        (Binop(_1, Or, _3) )
# 349 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                        (Binop(_1, And, _3) )
# 357 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                 (Unop(Not, _2) )
# 364 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 40 "parser.mly"
                        (IntLiteral(_1))
# 371 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 41 "parser.mly"
                        (FloatLiteral(_1))
# 378 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
                (Id(_1))
# 385 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                        (Assign(_1, _3))
# 393 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
